import sun.misc.Unsafe;
import java.lang.reflect.Field;
import java.lang.reflect.Constructor;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.io.*;

public class Array<T> {

  private Unsafe unsafe;
  private long size;
  private long address;
  private int index;

  public static void main(String[] args) {
    Array<Integer> array = new Array<Integer>(1024);
    array.set(10, 0);
  }

  Array (long size) {
    try {
      unsafe = getUnsafe();
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
    size = size;
    address = unsafe.allocateMemory(size);
    index = 0;
  }

  @SuppressWarnings("sunapi")
  private static Unsafe getUnsafe() throws Exception {
    Field singleoneInstanceField = Unsafe.class.getDeclaredField("theUnsafe");
    singleoneInstanceField.setAccessible(true);
    return (Unsafe) singleoneInstanceField.get(null);
  }

  public void set (T value, int index) {
    unsafe.put(address + index, value);
  }

  private ByteArrayOutputStream serialize(T object) {
     try {
       ByteArrayOutputStream bo = new ByteArrayOutputStream();
       ObjectOutputStream so = new ObjectOutputStream(bo);
       so.writeObject(object);
       so.flush();
       return bo
     } catch (Exception e) {
       System.out.println(e);
     }
  }

  private void testUnsafe () throws Exception {
    unsafe.putInt(address + 0, 10);
    System.out.format("%d ", unsafe.getInt(address + 0));
  }
}
